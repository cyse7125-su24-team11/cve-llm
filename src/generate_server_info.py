import os
import subprocess
import json
import shutil

def get_command_output(command):
    """Utility function to run a shell command and return its output."""
    try:
        return subprocess.check_output(command, shell=True, text=True).strip()
    except subprocess.CalledProcessError as e:
        return e.output.strip()

def get_os_info():
    """Collect OS information."""
    os_name = get_command_output("uname -s")
    os_release = get_command_output("uname -r")
    os_version = get_command_output(r"cat /etc/os-release | grep VERSION= | cut -d '\"' -f 2")
    vendor_name = get_command_output(r"cat /etc/os-release | grep '^ID=' | cut -d '=' -f 2")

    return {
        "name": os_name,
        "vendor": vendor_name,
        "version": os_version,
        "release": os_release
    }

def get_installed_software():
    """Collect installed software packages."""
    software_list = []

    if os.path.exists("/usr/bin/dpkg"):
        # dpkg_output = get_command_output(r'''dpkg-query -W -f='\{"name": "%{NAME}", "vendor": "%{VENDOR}", "version": "%{VERSION}", "release_date": ""\},\n' ''')
        dpkg_output = get_command_output(
            r'''dpkg-query -W -f='{"name": "${Package}", "version": "${Version}"},\n' ''')
        software_list.extend(json.loads(f"[{dpkg_output[:-1]}]"))
    elif os.path.exists("/usr/bin/rpm"):
        rpm_output = get_command_output(r'''rpm -qa --queryformat '\{"name": "%{NAME}", "vendor": "%{VENDOR}", "version": "%{VERSION}"\},\n' ''')
        software_list.extend(json.loads(f"[{rpm_output[:-1]}]"))

    return software_list

def get_running_services():
    """Collect running services."""
    services = []
    service_output = get_command_output("systemctl list-units --type=service --state=running --no-pager --no-legend")
    for line in service_output.splitlines():
        parts = line.split()
        services.append({
            "name": parts[0],
            "status": parts[3]
        })
    return services

def get_network_info():
    """Collect network configuration."""
    ip_address = get_command_output("hostname -I | awk '{print $1}'")
    routes_output = get_command_output("ip route show")

    routes = []
    for line in routes_output.splitlines():
        routes.append({"route": line})

    return {
        "ip_address": ip_address,
        "routes": routes
    }

def get_disk_info():
    """Collect disk and file system information."""
    disks = []
    disk_output = get_command_output("lsblk -o NAME,SIZE,MOUNTPOINT,FSTYPE | grep -v 'NAME'")
    for line in disk_output.splitlines():
        parts = line.split()
        disks.append({
            "name": parts[0],
            "size": parts[1],
            "mount_point": parts[2] if len(parts) > 2 else "",
            "fstype": parts[3] if len(parts) > 3 else ""
        })
    return disks

def get_cpu_info():
    """Collect CPU information."""
    cpu_model = get_command_output("lscpu | grep 'Model name:' | sed 's/Model name:\\s*//'")
    cpu_cores = get_command_output("lscpu | grep '^CPU(s):' | awk '{print $2}'")

    return {
        "model": cpu_model,
        "cores": cpu_cores
    }

def get_memory_info():
    """Collect memory information."""
    total_memory = get_command_output("free -h | grep 'Mem:' | awk '{print $2}'")
    used_memory = get_command_output("free -h | grep 'Mem:' | awk '{print $3}'")

    return {
        "total": total_memory,
        "used": used_memory
    }

def get_docker_info():
    """Collect Docker container information if Docker is installed."""
    if not shutil.which("docker"):
        return []

    docker_output = get_command_output("docker ps -a --format '{\"name\": \"{{.Names}}\", \"image\": \"{{.Image}}\", \"status\": \"{{.Status}}\"},'")
    return json.loads(f"[{docker_output[:-1]}]")

def collect():
    # Collect all information
    system_info = {
        # "os": get_os_info(),
        "installed_software": get_installed_software()
        # "running_services": get_running_services(),
        # "network": get_network_info(),
        # "disk": get_disk_info(),
        # "cpu": get_cpu_info(),
        # "memory": get_memory_info(),
        # "docker_containers": get_docker_info()
    }

    # Save to JSON file
    with open("data/server_info.json", "w") as json_file:
        json.dump(system_info, json_file, indent=4)

    return system_info

if __name__ == "__main__":
    collect()
