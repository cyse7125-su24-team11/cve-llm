from huggingface_hub import InferenceClient
import json
import sys
import os
from dotenv import load_dotenv


# def compare_cve_data(server_info_path, cve_data_path):
#     """Analyze CVE data using the Hugging Face model."""
#     # Load server info and CVE data
#     with open(server_info_path, 'r') as f:
#         server_info = json.load(f)
    
#     with open(cve_data_path, 'r') as f:
#         cve_data = json.load(f)
    
#     # Extract installed software
#     installed_software = server_info['installed_software']
    
#     # Filter relevant CVEs
#     relevant_cves = [cve for cve in cve_data if any(cve["cveMetadata"]["assignerShortName"] in software["name"] for software in installed_software)]
#     print(relevant_cves)
#     return relevant_cves


def analyze_cve_data(cve_data):
    # with open(server_info_path, 'r') as f:
    #     server_info = json.load(f)


    # relevant_cves = compare_cve_data(server_info_path, cve_data_path)

    # Initialize Hugging Face Inference Client
    client = InferenceClient(
        "meta-llama/Meta-Llama-3.1-8B-Instruct",
        token=os.getenv("HUGGINGFACE_TOKEN"),
    )

    # Construct the prompt for the model
    prompt =  f"Here is some CVE data:\n{cve_data}\n\nSearch through the internet or CVE website to get information about all the CVE metadata provided. Get the application that each CVE is used for, the version it affects, its impact score and criticality. Once you have the information, provide a query in a format to insert the acquired data into PostgreSQL. Only include relevant data for PostgreSQL insertion."
    # f"Here are some softwares: \n{server_info}. \n\nSearch through the internet or CVE website to get information about this CVE:\n{cve_data}. Get each application that the CVE is used for and the version it affects. If it affects any of my installed softwares on their installed versions fetch all information on the CVE. Once you have the information, provide a query in a format to insert the acquired data into PostgreSQL, in a new table called node_cve_report. Only include relevant data for PostgreSQL insertion."
    
    # f"Here is some CVE data:\n{cve_data}\n\nSearch through the internet or CVE website to get information about the CVE provided. Get each application that each CVE is used for and the version it affects. If it affects any of my installed softwares on their installed versions, available here:{server_info}, fetch all information on the CVE. Once you have the information, provide a query in a format to insert the acquired data into PostgreSQL, in a new table called node_cve_report. Only include relevant data for PostgreSQL insertion."
    
    response = client.chat_completion(
        messages=[{"role": "user", "content": prompt}],
        max_tokens=3500,
        stream=False
    )

    result = response.choices[0].message['content']
    print("Model's Response")
    print(result)
    return result

if __name__ == "__main__":
            
    conn_params = {
        "dbname": os.getenv("DATABASE_NAME"),
        "user": os.getenv("DATABASE_USER"),
        "password": os.getenv("DATABASE_PASSWORD"),
        "host": os.getenv("DATABASE_HOST"),
        "port": os.getenv("DATABASE_PORT")
    }
    if len(sys.argv) != 3:
        print("Usage: python llm.py <server_info_path> <cve_data_path>")
        sys.exit(1)
    
    server_info_path = sys.argv[1]
    cve_data_path = sys.argv[2]
    analyze_cve_data(server_info_path, cve_data_path)
