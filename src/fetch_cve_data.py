import psycopg2
import json
import os
from dotenv import load_dotenv
from datetime import datetime
import pytz

# Get the current time in UTC
utc_now = datetime.now(pytz.utc)

# Convert to Eastern Standard Time (EST)
est_now = utc_now.astimezone(pytz.timezone('US/Eastern'))

# Format the date as 'YYYY-MM-DD'
current_date = est_now.strftime("%Y-%m-%d")
print(current_date)

def fetch():
    """Fetch CVE data in chunks from the PostgreSQL database."""
    # Get connection parameters from environment variables
    conn_params = {
        "dbname": os.getenv("DATABASE_NAME"),
        "user": os.getenv("DATABASE_USER"),
        "password": os.getenv("DATABASE_PASSWORD"),
        "host": os.getenv("DATABASE_HOST"),
        "port": os.getenv("DATABASE_PORT")
    }

    try:
        # Connect to the database
        conn = psycopg2.connect(**conn_params)
        cur = conn.cursor()

        # Query to fetch CVEs with pagination
        query = """
            SELECT *
            FROM cve.cve_records
            WHERE date_published IS NOT NULL 
            AND date_published != ''
            AND date_published::date = %s;
        """
            # LIMIT %s OFFSET %s;        
        cur.execute(query, (current_date,))
        rows = cur.fetchall()

        if not rows:
            print("No more records to fetch.")
            cur.close()
            conn.close()
            return 
        
        cve_data = []
        # print(f"Fetch rows of cve with offset {offset}")
        for row in rows:
            # Assuming row[16] is a JSON string
            # raw_json = json.loads(row[16])  # Convert JSON string to a Python dict
            # cve_metadata = raw_json.get('cveMetadata', {})
            cve_data.append({
                "cveMetadata": {
                    "Id": row[0],
                    "cveId": row[1],
                    "assignerOrgId": row[2],
                    "assignerShortName": row[3],
                    "datePublished": row[8],
                    "state": row[12],
                    # "assignerOrgId": cve_metadata.get('assignerOrgId', ''),
                    # "state": cve_metadata.get('state', ''),
                    # "dateUpdated": cve_metadata.get('dateUpdated', ''),
                    # "assignerShortName": cve_metadata.get('assignerShortName', '')
                }
            })

        # print(f"Fetched {len(cve_data)} records.")
        
        # Save to JSON file
        with open("data/cve_data.json", "w") as json_file:
            json.dump(cve_data, json_file, indent=4)

        # Close database connection
        cur.close()
        conn.close()
        
        # Fetch next chunk
        # fetch(offset + limit, limit)
        # return True

    except psycopg2.OperationalError as e:
        print(f"Unable to connect to PostgreSQL: {e}")

    return cve_data
# False

if __name__ == "__main__":
    load_dotenv()  # Load environment variables from .env file
    fetch()
